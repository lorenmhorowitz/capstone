// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The login page renders properly Login component renders the login page properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        id="loginSquare"
      >
        <div
          id="title"
        >
          <span
            id="Corner"
          >
            Corner
          </span>
          <span
            id="Stone"
          >
            Stone
          </span>
        </div>
        <TextField
          handler={[Function]}
          label="email"
        />
        <TextField
          handler={[Function]}
          label="password"
        />
        <WithStyles(Button)
          id="Login"
          onClick={[Function]}
        >
          Log In
        </WithStyles(Button)>
        <WithStyles(Button)
          id="HoverLogin"
          onClick={[Function]}
        >
          Login With Hover
        </WithStyles(Button)>
      </div>,
      "className": "Img",
      "id": "scroll",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            id="title"
          >
            <span
              id="Corner"
            >
              Corner
            </span>
            <span
              id="Stone"
            >
              Stone
            </span>
          </div>,
          <TextField
            handler={[Function]}
            label="email"
          />,
          <TextField
            handler={[Function]}
            label="password"
          />,
          <WithStyles(Button)
            id="Login"
            onClick={[Function]}
          >
            Log In
          </WithStyles(Button)>,
          <WithStyles(Button)
            id="HoverLogin"
            onClick={[Function]}
          >
            Login With Hover
          </WithStyles(Button)>,
          null,
        ],
        "id": "loginSquare",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                id="Corner"
              >
                Corner
              </span>,
              <span
                id="Stone"
              >
                Stone
              </span>,
            ],
            "id": "title",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Corner",
                "id": "Corner",
              },
              "ref": null,
              "rendered": "Corner",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Stone",
                "id": "Stone",
              },
              "ref": null,
              "rendered": "Stone",
              "type": "span",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handler": [Function],
            "label": "email",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handler": [Function],
            "label": "password",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Log In",
            "id": "Login",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Log In",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Login With Hover",
            "id": "HoverLogin",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Login With Hover",
          "type": [Function],
        },
        null,
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          id="loginSquare"
        >
          <div
            id="title"
          >
            <span
              id="Corner"
            >
              Corner
            </span>
            <span
              id="Stone"
            >
              Stone
            </span>
          </div>
          <TextField
            handler={[Function]}
            label="email"
          />
          <TextField
            handler={[Function]}
            label="password"
          />
          <WithStyles(Button)
            id="Login"
            onClick={[Function]}
          >
            Log In
          </WithStyles(Button)>
          <WithStyles(Button)
            id="HoverLogin"
            onClick={[Function]}
          >
            Login With Hover
          </WithStyles(Button)>
        </div>,
        "className": "Img",
        "id": "scroll",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              id="title"
            >
              <span
                id="Corner"
              >
                Corner
              </span>
              <span
                id="Stone"
              >
                Stone
              </span>
            </div>,
            <TextField
              handler={[Function]}
              label="email"
            />,
            <TextField
              handler={[Function]}
              label="password"
            />,
            <WithStyles(Button)
              id="Login"
              onClick={[Function]}
            >
              Log In
            </WithStyles(Button)>,
            <WithStyles(Button)
              id="HoverLogin"
              onClick={[Function]}
            >
              Login With Hover
            </WithStyles(Button)>,
            null,
          ],
          "id": "loginSquare",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  id="Corner"
                >
                  Corner
                </span>,
                <span
                  id="Stone"
                >
                  Stone
                </span>,
              ],
              "id": "title",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Corner",
                  "id": "Corner",
                },
                "ref": null,
                "rendered": "Corner",
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Stone",
                  "id": "Stone",
                },
                "ref": null,
                "rendered": "Stone",
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handler": [Function],
              "label": "email",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handler": [Function],
              "label": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Log In",
              "id": "Login",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Log In",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Login With Hover",
              "id": "HoverLogin",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Login With Hover",
            "type": [Function],
          },
          null,
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
